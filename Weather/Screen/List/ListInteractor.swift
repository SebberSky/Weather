//
//  ListInteractor.swift
//  Weather
//
//  Created by chawapon.kiatpravee on 1/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic {
    func requestForecast()
}

protocol ListDataStore {
    var cityId: Int? { get set }
    var tempUnit: TemperatureUnit? { get set }
}

class ListInteractor: ListBusinessLogic, ListDataStore {
    var presenter: ListPresentationLogic?
    var worker: ListWorkerProtocol?
    var cityId: Int?
    var tempUnit: TemperatureUnit?
    
    // MARK: Do something
    
    init(worker: ListWorkerProtocol? = ListWorker()) {
        self.worker = worker
    }
    
    func requestForecast() {
        guard let cityId = self.cityId else {
            let response = Home.Error.Response(message: "FORECAST cityId not found!")
            self.presenter?.presentAlert(response: response)
            return
        }
        worker?.request5DaysForecast(cityId: cityId) { response in
            switch response {
            case .success(let forecast):
                var resultList: [List.Forecast.Response.ResponseResult] = []
                guard let list = forecast.list else {
                    let response = Home.Error.Response(message: "FORECAST Api response failed!")
                    self.presenter?.presentAlert(response: response)
                    return
                }
                
                for item in list {
                    let weatherResponse = Home.RequestWeather.Response(weatherSummary: item.weather?[0],
                                                                       main: item.main,
                                                                       visibility: item.visibility,
                                                                       wind: item.wind)
                    let info = List.Forecast.Response.ResponseResult(dateTime: item.dateTime,
                                                                     weatherInfo: weatherResponse)
                    resultList.append(info)
                }
                
                let response = List.Forecast.Response(result: resultList)
                self.presenter?.presentForecast(response: response)
            case .failed(let error):
                let response = Home.Error.Response(message: error)
                self.presenter?.presentAlert(response: response)
            }
        }
    }
}
