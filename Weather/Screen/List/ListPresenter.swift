//
//  ListPresenter.swift
//  Weather
//
//  Created by chawapon.kiatpravee on 1/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPresentationLogic {
    func presentForecast(response: List.Forecast.Response)
    func presentAlert(response: Home.Error.Response) 
}

class ListPresenter: ListPresentationLogic {
    var viewController: ListDisplayLogic?
    
    // MARK: Do something
    
    func presentForecast(response: List.Forecast.Response) {
        var filteredList: [List.Forecast.ViewModel.ViewModelResult] = []
        for item in response.result {
            guard let dateTimeSplitted = item.dateTime?.components(separatedBy: " "), dateTimeSplitted.count == 2 else {
                continue
            }
            
            let date = dateTimeSplitted[0]
            let time = dateTimeSplitted[1]
            
            let weatherInfo = convertWeatherResponseToViewModel(response: item.weatherInfo)
            let weatherByTime = List.Forecast.ViewModel.ViewModelResult.WeatherByTime(time: time,
                                                                                      info: weatherInfo)
            
            if let memberIndex = filteredList.firstIndex(where: { member in member.date == date }) {
                filteredList[memberIndex].weatherTime.append(weatherByTime)
            } else {
                let member = List.Forecast.ViewModel.ViewModelResult(date: date,
                                                                     weatherTime: [weatherByTime])
                filteredList.append(member)
            }
        }
        let viewModel = List.Forecast.ViewModel(result: filteredList)
        viewController?.displayForecast(viewModel: viewModel)
    }
    
    func presentAlert(response: Home.Error.Response) {
        let viewModel = Home.Error.ViewModel(message: response.message)
        viewController?.displayAlert(viewModel: viewModel)
    }
}
