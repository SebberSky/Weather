//
//  HomeInteractor.swift
//  Weather
//
//  Created by chawapon.kiatpravee on 1/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func requestCity(request: Home.RequestCity.Request)
    func requestWeather(request: Home.RequestWeather.Request)
    func requestWeatherIcon(request: Home.RequestWeatherIcon.Request)
    func requestConvertTemp(request: Home.RequestConvertTemp.Request)
}

protocol HomeDataStore {
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    var presenter: HomePresentationLogic?
    var worker: HomeWorkerProtocol?
    
    init(worker: HomeWorkerProtocol? = HomeWorker()) {
        self.worker = worker
    }
    
    // MARK: Do something
    
    func requestCity(request: Home.RequestCity.Request) {
        let cities = worker?.requestCity(input: request.searchText) ?? []
        let response = Home.RequestCity.Response(cities: cities)
        self.presenter?.presentCities(response: response)
    }
    
    func requestWeather(request: Home.RequestWeather.Request) {
        worker?.requestWeather(cityId: request.cityId, completion: { result in
            switch result {
            case .success(let weather):
                let response = Home.RequestWeather.Response(weatherSummary: weather.weather?[0],
                                                            main: weather.main,
                                                            visibility: weather.visibility,
                                                            wind: weather.wind)
                self.presenter?.presentWeather(response: response)
            case .failed(let error):
                let response = Home.Error.Response(message: error)
                self.presenter?.presentAlert(response: response)
            }
        })
    }
    
    func requestWeatherIcon(request: Home.RequestWeatherIcon.Request) {
        worker?.requestWeatherImage(iconCode: request.iconCode, completion: { data in
            let response = Home.RequestWeatherIcon.Response(imageData: data)
            self.presenter?.presentWeatherIcon(response: response)
        })
    }
    
    func requestConvertTemp(request: Home.RequestConvertTemp.Request) {
        let removeString = String(format: request.tempUnit.getPrefix, "")
        let maxTempWithoutUnit = request.maxTemp?.replacingOccurrences(of: removeString, with: "") ?? ""
        let minTempWithoutUnit = request.minTemp?.replacingOccurrences(of: removeString, with: "") ?? ""
        let tempWithoutUnit = request.temp?.replacingOccurrences(of: removeString, with: "") ?? ""
        let feelLikeWithoutUnit = request.feelLike?.replacingOccurrences(of: removeString, with: "") ?? ""
        
        var convertedTemp: Float?
        var convertedMaxTemp: Float?
        var convertedMinTemp: Float?
        var convertedFeelLike: Float?
        switch request.tempUnit {
        case .celcius:
            if let temp = Float(tempWithoutUnit), temp != 0 {
                convertedTemp = getFahrenheit(degreeC: temp)
            }
            
            if let maxTemp = Float(maxTempWithoutUnit), maxTemp != 0 {
                convertedMaxTemp = getFahrenheit(degreeC: maxTemp)
            }
            
            if let minTemp = Float(minTempWithoutUnit), minTemp != 0 {
                convertedMinTemp = getFahrenheit(degreeC: minTemp)
            }
            
            if let feelLike = Float(feelLikeWithoutUnit), feelLike != 0 {
                convertedFeelLike = getFahrenheit(degreeC: feelLike)
            }
        case .fahrenheit:
            if let temp = Float(tempWithoutUnit), temp != 0 {
                convertedTemp = getCelcius(degreeF: temp)
            }
            
            if let maxTemp = Float(maxTempWithoutUnit), maxTemp != 0 {
                convertedMaxTemp = getCelcius(degreeF: maxTemp)
            }
            
            if let minTemp = Float(minTempWithoutUnit), minTemp != 0 {
                convertedMinTemp = getCelcius(degreeF: minTemp)
            }
            
            if let feelLike = Float(feelLikeWithoutUnit), feelLike != 0 {
                convertedFeelLike = getCelcius(degreeF: feelLike)
            }
        }
        let response = Home.RequestConvertTemp.Response(maxTemp: convertedMaxTemp,
                                                        minTemp: convertedMinTemp,
                                                        temp: convertedTemp,
                                                        feelLike: convertedFeelLike)
        presenter?.presentConvertTemp(response: response)
    }
    
    private func getCelcius(degreeF: Float) -> Float {
        return (degreeF - 32) * (5 / 9)
    }
    
    private func getFahrenheit(degreeC: Float) -> Float {
        return (degreeC * (9 / 5)) + 32
    }
}
